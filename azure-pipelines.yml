# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master
- feature/*

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'

steps:
- task: GitVersion@5
  inputs:
    runtime: 'core'
    configFilePath: 'gitversion.yml'
- task: Bash@3
  inputs:
    targetType: 'inline'
    displayName: 'Create version number'
    script:
      echo "##vso[task.setvariable variable=complete_version]$(GitVersion.NugetVersion)"
- task: NuGetToolInstaller@1
- task: NuGetCommand@2
  displayName: 'Restore packages'
  inputs:
    command: 'restore'
    restoreSolution: '**/*.sln'
    feedsToUse: 'config'
    nugetConfigPath: 'nuget.config'
    externalFeedCredentials: 'nuget con'
- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(BuildConfiguration) /p:Version=$(COMPLETE_VERSION)'
- task: PowerShell@2
  displayName: 'Create Report Folder'
  inputs:
    targetType: 'inline'
    script: 'New-Item -ItemType directory -Path $(Build.SourcesDirectory)\results'
- task: DotNetCoreCLI@2
  displayName: 'Run unit test and generate coverage'
  inputs:
    command: 'test'
    arguments: '/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
    workingDirectory: 'IrdValidator.test'
- task: PowerShell@2
  displayName: 'Copy Results'
  inputs:
    targetType: 'inline'
    script: 'Copy-Item $(Build.SourcesDirectory)\IrdValidator.test\coverage.cobertura.xml -Destination $(Build.SourcesDirectory)\results'
- task: reportgenerator@4
  displayName: 'Generate test report'
  inputs:
    reports: '$(Build.SourcesDirectory)\results\coverage.cobertura.xml'
    targetdir: '$(Build.SourcesDirectory)\results'
- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)\results\coverage.cobertura.xml'
    pathToSources: '$(Build.SourcesDirectory)\IrdValidator'
    reportDirectory: '$(Build.SourcesDirectory)\results'
- task: DotNetCoreCLI@2
  displayName: "Nuget Pack"
  inputs:
    command: 'pack'
    packDirectory: '$(Build.ArtifactStagingDirectory)\Nuget'
    packagesToPack: '**/IrdValidator.csproj'
    versioningScheme: byEnvVar
    versionEnvVar: COMPLETE_VERSION    
- task: DotNetCoreCLI@2
  displayName: Push Nuget Package
  inputs:
    command: custom
    custom: nuget
    arguments: >
      push $(Build.ArtifactStagingDirectory)\Nuget\IrdNumberValidator.*.nupkg
      -s $(NuGetSourceServerUrl)
      -k $(NuGetSourceServerApiKey)